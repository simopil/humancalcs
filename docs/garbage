oggetto numero:
------------------------
int pos_virg;
char raw_val[];
------------------------
-----------------------
somma(char cifra1, char cifra2)
rip_somma(char cifra1, char cifra2)
------------------------


addizione tra 2 numeri 


addizione(numero num1, numero num2, numero destinazione)
{
    -creare un oggetto nuovo di tipo numero: appoggionum;
    -creare un oggetto nuovo di tipo numero: appoggionum2;
    
    -confronto num1.pos_virg vs num2.pos_virg;
        capisco chi è più grande(ha più cifre prima della virgola)
        
    -prendo il numero più piccolo
        1)riempio appoggionum.raw_val[] di tanti zeri quanta la differenza tra una pos_virg e    l'altra (e aggiungo 0 ad entrambi davanti)
        
            25.6 | 584.65-> 025.6 584.65
        
    -determino quale ha più cifre dopo la virgola (e ottengo la differenza di precisione)
      *e con questo determino la posizione della virgola nel risultato
      
    
    -sostituisco nel numero meno preciso le E con 0 dalla prima che trovo alla "differenza di   precisione"
    
        025.6 584.65-> 02560EEE 58465EEE
    
    -cercare la prima E e ne segno la posizione (int EPOS->quindi il ciclo partirà da EPOS-1)
    -ciclo [da EPOS-1 a 0]
    {
        char riporto = '0';
        parto da EPOS-1 dei due array (e finisco a 0)
        ciclo[
            se riporto = '1':
                sommo riporto ad una delle cifre nella posizione dell'array
            
            sommo posizione attuale array1 e array2 tramite la funzione somma (pos1,pos2)
            applico la funzione rip_somma sulla stessa posizione 
            riporto = rip_somma
            ]
    }
    
    
    
    
        
        
}




////-------------old_methods-----------------------------------------------------/////

// a function to compare two numbers:
// return 1: num1 is bigger;
// return 2: num2 is bigger;
// return 3: num1 == num2

public static int compare(numero num1, numero num2, boolean absolute)
{
    int start1 = num1.virg_pos - num1.bottom_search('E') -1;
    int start2 = num2.virg_pos - num2.bottom_search('E') -1;

    if(!absolute) {
        if(num1.sign == '+' && num2.sign == '-') return 1;
        if(num1.sign == '-' && num2.sign == '+') return 2;
    }
    // compara il numero di cifre prima e dopo la virg_pos
    //if num1 has more digits on the left
    if (start1 > start2)
    {
        // compara i segni (se son due meno si inverte il risultato)
        if (!absolute && num1.sign == '-') return 2;
        else return 1;
    }
    //if num2 has more digits on the left
    if (start1 < start2)
    {
        // compara i segni (se son due meno si inverte il risultato)
        if (!absolute && num1.sign == '-') return 1;
        else return 2;
    }

    //if both have same size on the left, performs digit-by-digit comparison of non-decimal part
    for (int i = start1; i > 0; i--)
    {
        if (num1.raw_value[num1.virg_pos-i] != num2.raw_value[num2.virg_pos-i]) {
            if (baseOP.confronto(num1.raw_value[num1.virg_pos-i], num2.raw_value[num2.virg_pos-i], ((num1.sign == '-' && absolute) || num1.sign == '+'), false)) return 1;
            else return 2;
        }
    }

    //if both are equals on the left, check digitwise on the right of the comma (if present)
    int tries = 0;
    if (num1.post_comma() > num2.post_comma()) tries = num1.post_comma();
    else tries = num2.post_comma();
    for(int i = 0; i < tries; i++)
    {
        if(num1.virg_pos+i == 127 && num2.virg_pos+i < 127) {
            if(num1.sign == '-' && !absolute) return 1;
            else return 2;
        }
        else if(num1.virg_pos+i < 127 && num2.virg_pos+i == 127) {
            if(num1.sign == '-' && !absolute) return 2;
            else return 1;
        }
        else {
            if (num1.raw_value[num1.virg_pos+i] != num2.raw_value[num2.virg_pos+i]) {
                if (baseOP.confronto(num1.raw_value[num1.virg_pos+i], num2.raw_value[num2.virg_pos+i], ((num1.sign == '-' && absolute) || num1.sign == '+'), false)) return 1;
                else return 2;
            }
        }
    }
    //assumed that only exception is EQUALITY
    return 3;
}

